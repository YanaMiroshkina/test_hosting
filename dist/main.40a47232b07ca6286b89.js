!function(n){var r={};function o(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.m=n,o.c=r,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t,r){var n,o,i,c={},l=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=n.apply(this,arguments)),o}),a=(i={},function(e,t){if("function"==typeof e)return e();if(void 0===i[e]){var n=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}i[e]=n}return i[e]}),u=null,f=0,s=[],d=r(4);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=c[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(g(r.parts[i],t))}else{var a=[];for(i=0;i<r.parts.length;i++)a.push(g(r.parts[i],t));c[r.id]={id:r.id,refs:1,parts:a}}}}function v(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function m(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),s.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertAt.before,n);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=s.indexOf(e);0<=t&&s.splice(t,1)}function b(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var n=function(){0;return r.nc}();n&&(e.attrs.nonce=n)}return y(t,e.attrs),m(e,t),t}function y(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function g(t,e){var n,r,o,i,a,s;if(e.transform&&t.css){if(!(i="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=i}if(e.singleton){var c=f++;n=u||(u=b(e)),r=S.bind(null,n,c,!1),o=S.bind(null,n,c,!0)}else o=t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(a=e,s=document.createElement("link"),void 0===a.attrs.type&&(a.attrs.type="text/css"),a.attrs.rel="stylesheet",y(s,a.attrs),m(a,s),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n=s,e),function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(e),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),function(){h(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}e.exports=function(e,a){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(a=a||{}).attrs="object"==typeof a.attrs?a.attrs:{},a.singleton||"boolean"==typeof a.singleton||(a.singleton=l()),a.insertInto||(a.insertInto="head"),a.insertAt||(a.insertAt="bottom");var s=v(e,a);return p(s,a),function(e){for(var t=[],n=0;n<s.length;n++){var r=s[n];(o=c[r.id]).refs--,t.push(o)}e&&p(v(e,a),a);for(n=0;n<t.length;n++){var o;if(0===(o=t[n]).refs){for(var i=0;i<o.parts.length;i++)o.parts[i]();delete c[o.id]}}}};var w,j=(w=[],function(e,t){return w[e]=t,w.filter(Boolean).join("\n")});function S(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=j(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t,n){"use strict";n(2),n(5),n(7)},function(e,t,n){var r=n(3);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var o=t.protocol+"//"+t.host,i=o+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var n,r=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?e:(n=0===r.indexOf("//")?r:0===r.indexOf("/")?o+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(n)+")")})}},function(e,t,n){var r=n(6);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t,n){"use strict";!function(){var c=window,l=document,m=c.requestAnimationFrame,e=l.querySelector("[data-js-dots]"),u=l.querySelectorAll("[data-js-dot]"),t=l.querySelector("[data-js-arrow]"),n=l.querySelectorAll("[data-js-slide]"),f=Math.max(l.body.scrollHeight,l.documentElement.scrollHeight,l.body.offsetHeight,l.documentElement.offsetHeight,l.body.clientHeight,l.documentElement.clientHeight);function o(s){[].forEach.call(n,function(e,t){if(t==s){var n=e.getBoundingClientRect().top,r=n<0?-1:0<n?1:0;if(0==r)return;o=e,i=r,a=(new Date).getTime(),m(function e(){var t=o.getBoundingClientRect().top,n=(new Date).getTime()-a,r=Math.round(t*n/2e3);r=i*t<r?t:0==r?i:r,0<i*t&&f-c.pageYOffset>i*l.documentElement.clientHeight&&(c.scrollBy(0,r),m(e))})}var o,i,a})}function r(){var a=c.innerHeight,s=a/2;[].forEach.call(n,function(e,t){var n=+e.getAttribute("data-js-slide"),r=e.getBoundingClientRect(),o=r.top,i=r.bottom;(0<=o&&o<s&&0<=i||s<i&&i<a||o<0&&a<i)&&[].forEach.call(u,function(e,t){e.classList.remove("active"),t===n&&e.classList.add("active")})})}e.onclick=function(e){var n,r;"SPAN"==e.target.tagName&&o((n=e.target,[].forEach.call(u,function(e,t){e.classList.remove("active"),e===n&&(e.classList.add("active"),r=t)}),r))},t.onclick=function(e){o(1)},r(),c.onscroll=r;var i=l.querySelector("[data-js-form='check-domain']"),a=l.querySelector("[data-js-domain-input]"),s=l.querySelector("[data-js-btn='check-domain']"),d=l.querySelector("[data-js-domain-info]"),p=l.querySelector("[data-js-domain-data]"),v=/^((?:https?:\/\/)?(?:((?:[а-яё0-9]+(?:[_-](?=[а-яё0-9]))?[а-яё0-9]+\.)+[а-яё]{2,6})|((?:[a-z0-9]+(?:[_-](?=[a-z0-9]))?[a-z0-9]+\.)+[a-z]{2,6})))$/;i.onsubmit=function(e){e.preventDefault();var t=a.value.toLowerCase();new XMLHttpRequest;v.test(t)?(encodeURIComponent(t),p.textContent="",p.textContent="Домен "+t+" свободен.",d.classList.add("visible")):alert("Заполните поле корректно")},s.onblur=function(){d.classList.remove("visible")};var h=l.querySelectorAll("[data-js-open='benefit-description']"),b=l.querySelectorAll("[data-js-description]");[].forEach.call(h,function(e){e.addEventListener("click",function(e){var t=e.currentTarget.nextSibling,n=t.classList.contains("visible"),r=200,o=0,i=3e3,a=0,s=a=(new Date).getTime(),c=0,l=!n,u=!1,f="",d="";function p(e){u?(o=r-e/i*r,d=f):l&&(o=e/i*r,d=t),d.style.maxHeight=o+"px"}function v(){if(n||t.classList.add("visible"),c=c+(new Date).getTime()-s,s==a)s=(new Date).getTime(),p(0);else if(c<i)p(c);else if(i<=c)return p(i),c=i,void(u&&(u=!1,f="",l&&(s=(new Date).getTime(),a=s,c=0,m(v))));m(v)}[].forEach.call(b,function(e){e.classList.contains("visible")&&(u=!0,(f=e).classList.remove("visible"))}),m(v)})})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,